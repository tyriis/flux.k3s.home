---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: observability
spec:
  interval: 5m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 21.0.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 15m
  timeout: 10m
  values:
    prometheus:
      prometheusSpec:
        resources:
          requests:
            memory: 3072Mi
            cpu: 1000m
          limits:
            memory: 3072Mi
            cpu: 3000m

        ruleSelector: {}
        ruleNamespaceSelector: {}
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelector: {}
        serviceMonitorNamespaceSelector: {}
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelector: {}
        podMonitorNamespaceSelector: {}
        podMonitorSelectorNilUsesHelmValues: false
        retention: 7d
        enableAdminAPI: true
        walCompression: true

        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              resources:
                requests:
                  storage: 25Gi

        additionalScrapeConfigs:
        - job_name: node-exporter
          honor_timestamps: true
          static_configs:
          - targets:
            # - nas.home:9100
            # - red.home:9100
            # - strg.home:9100
            - cubietruck.home:9100
            # - 192.168.1.1:9100

        # - job_name: ohm-exporter
        #   scrape_interval: 15s
        #   static_configs:
        #   - targets:
        #     - red.home:4445
        #     - carbon.home:4445

        # - job_name: windows-exporter
        #   scrape_interval: 15s
        #   static_configs:
        #   - targets:
        #     - red.home:9182

    alertmanager:
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: local-path
              resources:
                requests:
                  storage: 10Gi

      config:
        global:
          resolve_timeout: 5m
        route:
          # group_by: ['job']
          # group_wait: 30s
          # group_interval: 5m
          # repeat_interval: 12h
          # receiver: 'null'
          # routes:
          # - match:
          #     alertname: Watchdog
          #   receiver: 'null'
          group_by: ['alertname']
          group_wait: 20s
          group_interval: 5m
          repeat_interval: 3h
          receiver: discord_webhook
          routes:
          - match:
              alertname: Watchdog
            receiver: 'null'

        receivers:
        - name: 'null'
        # - name: 'discord_webhook'
        #   webhook_configs:
        #   - url: 'http://alertmanager-discord.observability.svc.cluster.local:9094'
        templates:
        - '/etc/alertmanager/config/*.tmpl'

    nodeExporter:
      serviceMonitor:
        relabelings:
        - action: replace
          regex: (.*)
          replacement: $1
          sourceLabels:
          - __meta_kubernetes_pod_node_name
          targetLabel: kubernetes_node

    grafana:
      enabled: false
      forceDeployDashboards: true
      adminPassword: "${SECRET_GRAFANA_PASSWORD}"
      # serviceMonitor:
      #   enabled: true # if enabled chart fails :/
      grafana.ini:
        server:
          root_url: "https://grafana.home.${SECRET_DOMAIN}"
        auth.google:
          enabled: true
          client_id: "${SECRET_GRAFANA_OAUTH_CLIENT_ID}"
          client_secret: "${SECRET_GRAFANA_OAUTH_CLIENT_SECRET}"
          scopes: https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email
          auth_url: https://accounts.google.com/o/oauth2/auth
          token_url: https://accounts.google.com/o/oauth2/token
          allowed_domains: "${SECRET_DOMAIN}"
          allow_sign_up: true
      sidecar:
        dashboards:
          enabled: true
          searchNamespace: ALL
        datasources:
          enabled: true
      dashboardProviders:
        dashboardproviders.yaml:
          apiVersion: 1
          providers:
          - name: default
            orgId: 1
            folder: ''
            type: file
            disableDeletion: true
            allowUiUpdates: false
            options:
              path: /tmp/dashboards
          - name: flux
            orgId: 1
            folder: Flux
            type: file
            disableDeletion: false
            allowUiUpdates: true
            options:
              path: /var/lib/grafana/dashboards/flux
      dashboards:
        flux:
          flux-cluster:
            url: https://raw.githubusercontent.com/fluxcd/flux2/main/manifests/monitoring/grafana/dashboards/cluster.json
            datasource: Prometheus
          flux-control-plane:
            url: https://raw.githubusercontent.com/fluxcd/flux2/main/manifests/monitoring/grafana/dashboards/control-plane.json
            datasource: Prometheus
          # Ref: https://grafana.com/grafana/dashboards/11074
          "1 Node Exporter for Prometheus Dashboard EN v20201010":
            gnetId: 11074
            revision: 9
            datasource: Prometheus

      ingress:
        enabled: true
        annotations:
          kubernetes.io/ingress.class: traefik
          traefik.ingress.kubernetes.io/router.tls: "true"
          traefik.ingress.kubernetes.io/frontend-entry-points: http,https
          traefik.ingress.kubernetes.io/redirect-entry-point: https
          traefik.ingress.kubernetes.io/redirect-permanent: "true"
        hosts:
        - "grafana.home.${SECRET_DOMAIN}"
        path: /
        tls:
        - secretName: tls-cert
          hosts:
          - "grafana.home.${SECRET_DOMAIN}"

    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
        - action: replace
          sourceLabels:
          - node
          targetLabel: instance

    kubeApiServer:
      enabled: true
      serviceMonitor:
        metricRelabelings:
        - action: keep
          regex: 'kube_(daemonset|deployment|pod|namespace|node|statefulset).+'
          sourceLabels:
          - __name__


    kubeControllerManager:
      enabled: false

    kubeScheduler:
      enabled: false

    kubeProxy:
      enabled: false

    kubeEtcd:
      enabled: false

  # valuesFrom:
  #   - kind: Secret
  #     name: "kube-prometheus-stack-values"
  #     optional: false
